{"data":{"site":{"siteMetadata":{"title":"Computer Science and Software Engineering","author":"Assignment 04"}},"markdownRemark":{"id":"f00205d2-c911-5071-93d9-eb9d99111967","excerpt":"De Web Graphics Library is een Javascript API die instaat voor het renderen van interactive 2D en 3D graphics binnen de webbrowser zonder…","html":"<p>De Web Graphics Library is een Javascript API die instaat voor het renderen van interactive 2D en 3D graphics binnen de webbrowser zonder dat plugins vereist worden. Dit wordt mogelijk gemaakt doordat de API sterk lijkt op de OpenGL API die op zijn beurt gebruikt kan worden binnen de html 5 canvas elementen. Lees verder als je meer te weten wilt komen over hoe we WebGL gaan implementeren.</p>\n<h3>Instructies opdracht</h3>\n<ul>\n<li>\n<p>Implementeren van de verschillende bewerkingen met betrekking tot Lineaire Algebra voor Computergrafiek:</p>\n<blockquote>\n<p><strong>vectoren</strong>: norm, normalisatie, som, verschil, vermenigvuldiging (scalaire vermenigvuldiging, inwendig product, uitwendig product)</p>\n</blockquote>\n<blockquote>\n<p><strong>matrices</strong>: som, verschil, vermenigvuldiging, identiteitsmatrix, inverse matrix, getransponeerde matrix</p>\n</blockquote>\n<blockquote>\n<p><strong>vector als matrix</strong>: kolommatrix (m x 1), rijmatrix (1 x n), homogene coördinaten</p>\n</blockquote>\n<blockquote>\n<p><strong>3D transformatiematrices</strong>: schaalmatrix, Eulerrotatiematrices, translatiematrix, volgorde van de transformaties</p>\n</blockquote>\n</li>\n<li>\n<p>Per klasse een testklasse aanmaken waarmee we de functionaliteit van de klasse gaan testen. Wanneer na de test de output overeenkomt met het verwachte resultaat is de test geslaagd.</p>\n</li>\n<li>\n<p>Doel van deze testen: nagaan na elke wijziging of het programma nog naar behoren werkt.</p>\n</li>\n</ul>\n<h3>Aanpak</h3>\n<ul>\n<li>Laat ons eerst even onze mappenstructuur bekijken</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    ├── index.html\n    ├── assets\n          ├── glsl\n                ├── fragment-shader.glsl\n                ├── vertex-shader.glsl\n          ├── js\n                ├── Library             --&gt; contains all the calculations\n                      ├── Canvas.js\n                ├── Tests\n                      ├── library       --&gt; contains all the test calculations\n                      ├── Tests.js\n                ├── Application.js\n                ├── main.js</code></pre></div>\n<p>In de <code class=\"language-text\">index.html</code> wordt de <code class=\"language-text\">main.js</code> ingeladen en van daaruit spreken we dan de <code class=\"language-text\">Application</code> klasse aan.<br><br></p>\n<ul>\n<li>Van zodra de DOM klaar is maken we een nieuwe applicatie aan. Bovenaan importeren we onze <code class=\"language-text\">Application</code> klasse die dan een instantie aanmaakt.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> Application <span class=\"token keyword\">from</span> <span class=\"token string\">'./Application.js'</span><span class=\"token punctuation\">;</span>\nwindow<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'DOMContentLoaded'</span><span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Application</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>In onderstaand voorbeeld een overzicht van de structuur van onze <code class=\"language-text\">Application</code> klasse.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Application</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> tests <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tests<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">new</span> <span class=\"token class-name\">Tests</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">'WebGL2 Demo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>shaderSources <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      fragment<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n      vertex<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">preloader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">async</span> <span class=\"token function\">preloader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hey daaar'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../assets/glsl/vertex-shader.glsl'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>source <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>shaderSources<span class=\"token punctuation\">.</span>vertex <span class=\"token operator\">=</span> source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>error <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../assets/glsl/vertex-shader.glsl'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>source <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>shaderSources<span class=\"token punctuation\">.</span>fragment <span class=\"token operator\">=</span> source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>error <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Canvas</span><span class=\"token punctuation\">(</span>\n      document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>clientWidth<span class=\"token punctuation\">,</span>\n      document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>clientHeight<span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>shaderSources\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Onderaan zien we dat <code class=\"language-text\">Canvas</code>wordt aangeroepen. Deze zal de grootte en breedte overnemen van de client waarin het programma draait. Laat ons even een kijkje nemen naar welke taken <code class=\"language-text\">Canvas</code> voor zijn rekening neemt.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/** Class representing a canvas element for WebGL2 */</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Canvas</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">,</span> shaderSources<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> width<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> height<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>shaderSources <span class=\"token operator\">=</span> shaderSources<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Aanmaken en exporteren van de <code class=\"language-text\">Canvas</code> klasse</p>\n<h3>How do we fix this?</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">handleChange</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">{</span>\n      value<span class=\"token punctuation\">:</span> newValue<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Or you can stay and figure out why is it made asynchronous. <em>Doesn’t it make React slower?</em></p>","fields":{"readingTime":{"text":"3 min read"}},"frontmatter":{"title":"WebGL • Web Graphics Library","date":"14 April, 2019"}}},"pageContext":{"slug":"/web-gl-01/","previous":{"fields":{"slug":"/text-headings/"},"frontmatter":{"title":"Just text and links"}},"next":null}}