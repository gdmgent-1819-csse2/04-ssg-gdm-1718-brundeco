{"data":{"site":{"siteMetadata":{"title":"Computer Science and Software Engineering","author":"Assignment 04"}},"markdownRemark":{"id":"24b6c614-b1a7-58b6-843f-8e0ef9c8256e","excerpt":"De Web Graphics Library is een Javascript API die instaat voor het renderen van interactive 2D en 3D graphics binnen de webbrowser zonder…","html":"<p>De Web Graphics Library is een Javascript API die instaat voor het renderen van interactive 2D en 3D graphics binnen de webbrowser zonder dat plugins vereist worden. Dit wordt mogelijk gemaakt doordat de API sterk lijkt op de OpenGL API die op zijn beurt gebruikt kan worden binnen de html 5 canvas elementen. Lees verder als je meer te weten wilt komen over hoe we WebGL gaan implementeren.</p>\n<h3>Instructies opdracht</h3>\n<ul>\n<li>\n<p>Implementeren van de verschillende bewerkingen met betrekking tot Lineaire Algebra voor Computergrafiek:</p>\n<blockquote>\n<p><strong>vectoren</strong>: norm, normalisatie, som, verschil, vermenigvuldiging (scalaire vermenigvuldiging, inwendig product, uitwendig product)</p>\n</blockquote>\n<blockquote>\n<p><strong>matrices</strong>: som, verschil, vermenigvuldiging, identiteitsmatrix, inverse matrix, getransponeerde matrix</p>\n</blockquote>\n<blockquote>\n<p><strong>vector als matrix</strong>: kolommatrix (m x 1), rijmatrix (1 x n), homogene coördinaten</p>\n</blockquote>\n<blockquote>\n<p><strong>3D transformatiematrices</strong>: schaalmatrix, Eulerrotatiematrices, translatiematrix, volgorde van de transformaties</p>\n</blockquote>\n</li>\n<li>\n<p>Per klasse een testklasse aanmaken waarmee we de functionaliteit van de klasse gaan testen. Wanneer na de test de output overeenkomt met het verwachte resultaat is de test geslaagd.</p>\n</li>\n<li>\n<p>Doel van deze testen: nagaan na elke wijziging of het programma nog naar behoren werkt.</p>\n</li>\n</ul>\n<h3>Aanpak</h3>\n<ul>\n<li>Laat ons eerst even onze mappenstructuur bekijken</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    ├── index.html\n    ├── assets\n          ├── glsl\n                ├── fragment-shader.glsl\n                ├── vertex-shader.glsl\n          ├── js\n                ├── Library             --&gt; contains all the calculations\n                      ├── Canvas.js\n                ├── Tests\n                      ├── library       --&gt; contains all the test calculations\n                      ├── Tests.js\n                ├── Application.js\n                ├── main.js</code></pre></div>\n<p>In de <code class=\"language-text\">index.html</code> wordt de <code class=\"language-text\">main.js</code> ingeladen en van daaruit spreken we dan de <code class=\"language-text\">Application</code> klasse aan.<br><br></p>\n<ul>\n<li>Van zodra de DOM klaar is maken we een nieuwe applicatie aan. Bovenaan importeren we onze <code class=\"language-text\">Application</code> klasse die dan een instantie aanmaakt.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> Application <span class=\"token keyword\">from</span> <span class=\"token string\">'./Application.js'</span><span class=\"token punctuation\">;</span>\nwindow<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'DOMContentLoaded'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">_</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Application</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>In onderstaand voorbeeld een overzicht van de structuur van onze <code class=\"language-text\">Application</code> klasse.</strong></p>\n<ul>\n<li>\n<p>Binnen de constructor kijken we of er tests zijn, indien ja dan worden deze uitgevoerd. De <code class=\"language-text\">Test</code> files worden bovenaan ingeladen met <code class=\"language-text\">import Tests from &#39;./Tests/Tests.js&#39;</code></p>\n</li>\n<li>\n<p>De shadersources worden initieel op <code class=\"language-text\">null</code> gezet. Hierna zal <code class=\"language-text\">preloader()</code> de shadersources ophalen.</p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Application</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> tests <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tests<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">new</span> <span class=\"token class-name\">Tests</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">'WebGL2 Demo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>shaderSources <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      fragment<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n      vertex<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">preloader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>\n<p>De waarden voor de shadersources worden vervolgens opgehaald via <code class=\"language-text\">preloader()</code>.</p>\n</li>\n<li>\n<p>Dit gebeurt via <code class=\"language-text\">async</code> en <code class=\"language-text\">await</code>. Op deze manier wordt de informatie asynchroon ingeladen en worden errors vermeden. Wanneer de shaders beschikbaar zijn worden ze toegekend, dit gebeurt in ons <code class=\"language-text\">.then()</code>statement. Eventuele errors worden opgevangen in de <code class=\"language-text\">.catch()</code></p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">   <span class=\"token keyword\">async</span> <span class=\"token function\">preloader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Check'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../assets/glsl/vertex-shader.glsl'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">source</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>shaderSources<span class=\"token punctuation\">.</span>vertex <span class=\"token operator\">=</span> source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../assets/glsl/vertex-shader.glsl'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">source</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>shaderSources<span class=\"token punctuation\">.</span>fragment <span class=\"token operator\">=</span> source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">async</span> <span class=\"token function\">preloader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Canvas</span><span class=\"token punctuation\">(</span>\n      document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>clientWidth<span class=\"token punctuation\">,</span>\n      document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>clientHeight<span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>shaderSources\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","fields":{"readingTime":{"text":"3 min read"}},"frontmatter":{"title":"WebGL • Web Graphics Library","date":"14 April, 2019"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/web-gl-01/","previous":{"fields":{"slug":"/over-auteur/"},"frontmatter":{"title":"Over auteur"}},"next":{"fields":{"slug":"/shaders/"},"frontmatter":{"title":"Vertex & fragment shaders"}}}}